module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = function(seg) { return cleanup(), seg; },
        peg$c2 = " ",
        peg$c3 = { type: "literal", value: " ", description: "\" \"" },
        peg$c4 = /^[0-9]/,
        peg$c5 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c6 = /^[a-zA-Z]/,
        peg$c7 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c8 = peg$FAILED,
        peg$c9 = "\"",
        peg$c10 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c11 = "\\\"",
        peg$c12 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
        peg$c13 = /^[^"]/,
        peg$c14 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c15 = function(str) { return str.join(''); },
        peg$c16 = "'",
        peg$c17 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c18 = "\\'",
        peg$c19 = { type: "literal", value: "\\'", description: "\"\\\\'\"" },
        peg$c20 = /^[^']/,
        peg$c21 = { type: "class", value: "[^']", description: "[^']" },
        peg$c22 = "+",
        peg$c23 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c24 = function(n) { return n; },
        peg$c25 = "-",
        peg$c26 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c27 = function(n) { return -n; },
        peg$c28 = ".",
        peg$c29 = { type: "literal", value: ".", description: "\".\"" },
        peg$c30 = function(i, d) { return parseFloat(i.join('') + '.' + d.join(''), 10); },
        peg$c31 = function(i) { return parseInt(i.join(''), 10); },
        peg$c32 = "undefined",
        peg$c33 = { type: "literal", value: "undefined", description: "\"undefined\"" },
        peg$c34 = function() { return undefined; },
        peg$c35 = "null",
        peg$c36 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c37 = function() { return null; },
        peg$c38 = "true",
        peg$c39 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c40 = function() { return true; },
        peg$c41 = "false",
        peg$c42 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c43 = function() { return false; },
        peg$c44 = "NaN",
        peg$c45 = { type: "literal", value: "NaN", description: "\"NaN\"" },
        peg$c46 = function() { return NaN; },
        peg$c47 = "Infinity",
        peg$c48 = { type: "literal", value: "Infinity", description: "\"Infinity\"" },
        peg$c49 = function() { return Infinity; },
        peg$c50 = "*",
        peg$c51 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c52 = "/",
        peg$c53 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c54 = "%",
        peg$c55 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c56 = "&&",
        peg$c57 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c58 = "||",
        peg$c59 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c60 = "==",
        peg$c61 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c62 = function() { return '==='; },
        peg$c63 = function(op) { return { type:'operator', value:op }; },
        peg$c64 = "(",
        peg$c65 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c66 = function() { return { type:'parenOpen' }; },
        peg$c67 = ")",
        peg$c68 = { type: "literal", value: ")", description: "\")\"" },
        peg$c69 = function() { return { type:'parenClose' }; },
        peg$c70 = function(left, right) { return left + right.join(''); },
        peg$c71 = function(left) { return left; },
        peg$c72 = function(open, left, close, op, right) { return [open].concat(left).concat([close,op]).concat(right); },
        peg$c73 = function(open, expr, close) { return [open].concat(expr).concat([close]); },
        peg$c74 = function(val, op, expr) { return [ val, op ].concat(expr); },
        peg$c75 = function(val) { return [val]; },
        peg$c76 = ",",
        peg$c77 = { type: "literal", value: ",", description: "\",\"" },
        peg$c78 = function(left, right) { return [left].concat(right); },
        peg$c79 = function(expr) { return [expr]; },
        peg$c80 = function(args) { return args; },
        peg$c81 = function() { return []; },
        peg$c82 = function(name, args) { return { name:name, args:args }; },
        peg$c83 = null,
        peg$c84 = function(left, right) { return left + '.' + right; },
        peg$c85 = ":",
        peg$c86 = { type: "literal", value: ":", description: "\":\"" },
        peg$c87 = function(path, args, props) { return { context:path, args:args, props:props }; },
        peg$c88 = function(path, args) { return { context:path, args:args }; },
        peg$c89 = function(path, props) { return { context:path, props:props }; },
        peg$c90 = function(path) { return { context:path }; },
        peg$c91 = function(val) { return { type:'reserved', value:val }; },
        peg$c92 = function(val) { return { type:'context', value:val }; },
        peg$c93 = function(val) { return { type:'string', value:val }; },
        peg$c94 = function(val) { return { type:'number', value:val }; },
        peg$c95 = "?",
        peg$c96 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c97 = function() { return 'conditional'; },
        peg$c98 = function() { return 'switch'; },
        peg$c99 = "@",
        peg$c100 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c101 = function() { return 'iterator'; },
        peg$c102 = "&",
        peg$c103 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c104 = function() { return 'custom'; },
        peg$c105 = "#",
        peg$c106 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c107 = function() { return 'namedDeclare'; },
        peg$c108 = function() { return 'namedRender'; },
        peg$c109 = ">",
        peg$c110 = { type: "literal", value: ">", description: "\">\"" },
        peg$c111 = function() { return 'partial'; },
        peg$c112 = function(seg) { seg.offset = offset(); seg.line = line(); seg.column = column(); return seg; },
        peg$c113 = /^[^{]/,
        peg$c114 = { type: "class", value: "[^{]", description: "[^{]" },
        peg$c115 = function(txt) { return { type:'text', content:txt.join('') }; },
        peg$c116 = "{{",
        peg$c117 = { type: "literal", value: "{{", description: "\"{{\"" },
        peg$c118 = "}",
        peg$c119 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c120 = function(body, modifiers) { return { type:'output', content:body, modifiers:modifiers || [] }; },
        peg$c121 = "{",
        peg$c122 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c123 = function(type, body, modifiers) { return enterSegment(type), { type:type, content:body, modifiers:modifiers || [] }; },
        peg$c124 = function(type, body, modifiers) { return enterSegment(type, true), { type:type, content:body, modifiers:modifiers || [], closing:true }; },
        peg$c125 = "|",
        peg$c126 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c127 = function(type) { return nextSegment(type), { type:type, next:true }; },
        peg$c128 = function(type) { return exitSegment(type), { type:type, closing:true }; },
        peg$c129 = "\\",
        peg$c130 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c131 = function(ctx, expr) { return { context:ctx && ctx[0].context, expression:expr }; },
        peg$c132 = function(left, right) { return [{ name:left.name, args:left.args }].concat(right); },
        peg$c133 = function(left, right) { return [{ name:left, args:[] }].concat(right); },
        peg$c134 = function(left) { return [{ name:left.name, args:left.args }]; },
        peg$c135 = function(left) { return [{ name:left, args:[] }]; },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsesegment();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsesegment();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsespace() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c2;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c4.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }

      return s0;
    }

    function peg$parseletter() {
      var s0;

      if (peg$c6.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.substr(peg$currPos, 2) === peg$c11) {
          s3 = peg$c11;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s3 === peg$FAILED) {
          if (peg$c13.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (input.substr(peg$currPos, 2) === peg$c11) {
              s3 = peg$c11;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c13.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
            }
          }
        } else {
          s2 = peg$c8;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c9;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c15(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c16;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (input.substr(peg$currPos, 2) === peg$c18) {
            s3 = peg$c18;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s3 === peg$FAILED) {
            if (peg$c20.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (input.substr(peg$currPos, 2) === peg$c18) {
                s3 = peg$c18;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s3 === peg$FAILED) {
                if (peg$c20.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c21); }
                }
              }
            }
          } else {
            s2 = peg$c8;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c16;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c15(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c22;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c24(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c25;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenumber();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c27(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsedigit();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsedigit();
            }
          } else {
            s1 = peg$c8;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s2 = peg$c28;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsedigit();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsedigit();
                }
              } else {
                s3 = peg$c8;
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c30(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsedigit();
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsedigit();
              }
            } else {
              s1 = peg$c8;
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c31(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsereserved() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c32) {
        s1 = peg$c32;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c34();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c35) {
          s1 = peg$c35;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c37();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c38) {
            s1 = peg$c38;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c40();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c41) {
              s1 = peg$c41;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c43();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c44) {
                s1 = peg$c44;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c45); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c46();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c47) {
                  s1 = peg$c47;
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c48); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c49();
                }
                s0 = s1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseoperator() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c22;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c25;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s1 = peg$c50;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s1 = peg$c52;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s1 = peg$c54;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c56) {
                  s1 = peg$c56;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c58) {
                    s1 = peg$c58;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c60) {
                      s2 = peg$c60;
                      peg$currPos += 2;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c61); }
                    }
                    if (s2 !== peg$FAILED) {
                      peg$reportedPos = s1;
                      s2 = peg$c62();
                    }
                    s1 = s2;
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c63(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparenOpen() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c64;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c66();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparenClose() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 41) {
        s1 = peg$c67;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c69();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsevariable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseletter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseletter();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedigit();
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseletter();
            if (s3 === peg$FAILED) {
              s3 = peg$parsedigit();
            }
          }
        } else {
          s2 = peg$c8;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c70(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseletter();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c71(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseexpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseparenOpen();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseparenClose();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseoperator();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseexpression();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c72(s1, s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c8;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c8;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c8;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c8;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseparenOpen();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpression();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsespace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseparenClose();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c73(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c8;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsevalue();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsespace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsespace();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseoperator();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsespace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsespace();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseexpression();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c74(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c8;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c8;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsevalue();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c75(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseexpressionList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c76;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpressionList();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c78(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseexpression();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c79(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsearguments() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c64;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpressionList();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c67;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c68); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c80(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c64;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsespace();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c67;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c81();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      }

      return s0;
    }

    function peg$parsefunc() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsearguments();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c82(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }

      return s0;
    }

    function peg$parsevariablePath() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespace();
        if (s2 === peg$FAILED) {
          s2 = peg$c83;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsespace();
            if (s4 === peg$FAILED) {
              s4 = peg$c83;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsevariablePath();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c84(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsevariable();
      }

      return s0;
    }

    function peg$parsecontext() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsevariablePath();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespace();
        if (s2 === peg$FAILED) {
          s2 = peg$c83;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsearguments();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsespace();
            if (s4 === peg$FAILED) {
              s4 = peg$c83;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s5 = peg$c85;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c86); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsevariablePath();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c87(s1, s3, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c8;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsevariablePath();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsespace();
          if (s2 === peg$FAILED) {
            s2 = peg$c83;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsearguments();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c88(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsevariablePath();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s2 = peg$c85;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c86); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsevariablePath();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c89(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsevariablePath();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c90(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsereserved();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecontext();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c92(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsestring();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c93(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsenumber();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c94(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsesegmentType() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c95;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c97();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c50;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c99;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c100); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c101();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 38) {
              s1 = peg$c102;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c104();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 35) {
                s1 = peg$c105;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c106); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c107();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 43) {
                  s1 = peg$c22;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c23); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c108();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s1 = peg$c109;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c110); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c111();
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesegment() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetextSegment();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetypedSegmentSelfClosing();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetypedSegmentOpen();
          if (s1 === peg$FAILED) {
            s1 = peg$parsetypedSegmentNext();
            if (s1 === peg$FAILED) {
              s1 = peg$parsetypedSegmentClose();
              if (s1 === peg$FAILED) {
                s1 = peg$parseoutputSegment();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c112(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetextSegment() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c113.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c113.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c114); }
          }
        }
      } else {
        s1 = peg$c8;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c115(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseoutputSegment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c116) {
        s1 = peg$c116;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesegmentBody();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c118;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c119); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsemodifiers();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c83;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c118;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c119); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c120(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c8;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c8;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c8;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c8;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }

      return s0;
    }

    function peg$parsetypedSegmentOpen() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c121;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesegmentType();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c121;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c122); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsesegmentBody();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c118;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c119); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsemodifiers();
                          if (s11 === peg$FAILED) {
                            s11 = peg$c83;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parsespace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parsespace();
                            }
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 125) {
                                s13 = peg$c118;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c119); }
                              }
                              if (s13 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c123(s3, s7, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c8;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c8;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c8;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c8;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c8;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c8;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c8;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c8;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }

      return s0;
    }

    function peg$parsetypedSegmentSelfClosing() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c121;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesegmentType();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c121;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c122); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsesegmentBody();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 47) {
                        s9 = peg$c52;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c53); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s11 = peg$c118;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c119); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parsespace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parsespace();
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsemodifiers();
                              if (s13 === peg$FAILED) {
                                s13 = peg$c83;
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = [];
                                s15 = peg$parsespace();
                                while (s15 !== peg$FAILED) {
                                  s14.push(s15);
                                  s15 = peg$parsespace();
                                }
                                if (s14 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 125) {
                                    s15 = peg$c118;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c119); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c124(s3, s7, s13);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c8;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c8;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c8;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c8;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c8;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c8;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c8;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c8;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c8;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c8;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }

      return s0;
    }

    function peg$parsetypedSegmentNext() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c121;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesegmentType();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c121;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c122); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 124) {
                    s7 = peg$c125;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c126); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c118;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c119); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s11 = peg$c118;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c119); }
                          }
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c127(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c8;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c8;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c8;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c8;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c8;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c8;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }

      return s0;
    }

    function peg$parsetypedSegmentClose() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c121;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesegmentType();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c121;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c122); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s7 = peg$c52;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c53); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c118;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c119); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsespace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s11 = peg$c118;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c119); }
                          }
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c128(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c8;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c8;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c8;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c8;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c8;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c8;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c8;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }

      return s0;
    }

    function peg$parsesegmentBody() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsecontext();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsespace();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c129;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c130); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c8;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c8;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c8;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c83;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c131(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }

      return s0;
    }

    function peg$parsemodifiers() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefunc();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 124) {
          s2 = peg$c125;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c126); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemodifiers();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c132(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c8;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsevariable();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s2 = peg$c125;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c126); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsemodifiers();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c133(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c8;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c8;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c8;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsefunc();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c134(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsevariable();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c135(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }


      var segStack = [];
      var segTableInfo = {
        'conditional':  { min: 1, max: 2 },
        'switch':       { min: 1, max: Infinity },
        'iterator':     { min: 1, max: 1 },
        'custom':       { min: 0, max: Infinity },
        'namedDeclare': { min: 1, max: 1 },
        'namedRender':  { min: 0, max: 0 },
        'partial':      { min: 0, max: 0 }
      };

      function enterSegment(type, selfClosing) {
        segStack.push({
          type: type,
          count: selfClosing ? 0 : 1
        });
        
        if (selfClosing) {
          exitSegment(type);
        } else {
          checkSegmentCount(type);
        }
      }

      function nextSegment(type) {
        if (checkSegment(type) && checkSegmentCount(type)) {
          ++segStack[segStack.length - 1].count;
        }
      }

      function exitSegment(type) {
        if (checkSegment(type, true) && checkSegmentCount(type)) {
          return segStack.pop(), true;
        } else {
          throw error("Mismatch " + segStack[segStack.length - 1].type + " closing segment");
        }
      }

      function checkSegment(type, closing) {
        if (segStack.length) {
          return segStack[segStack.length - 1].type === type;
        } else {
          throw error("Unexpected " + type + " " + (closing ? "closing" : "next") + " segment");
        }
      }

      function checkSegmentCount(type) {
        var info = segTableInfo[type];
        var count = segStack[segStack.length - 1].count;

        if (info.min > count) {
          throw error("Missing content for " + type + " segment");
        } else if (info.max < count) {
          throw error("Too many contents for " + type + " segment");
        } else {
          return true;
        }
      }

      function cleanup() {
        if (segStack.length) {
          throw error("Missing " + segStack[segStack.length - 1].type + " closing segment");
        }
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
